#!/usr/bin/env node

/* eslint-disable no-process-exit */
'use strict';

// record a live hls-stream storing an on-demand ready version

const Fs = require('fs');
try {
  var nopt = require('noptify/node_modules/nopt');
} catch (e) {
  nopt = require('nopt');
}

const HlsSegmentReader = require('hls-segment-reader');
const Recorder = require('../lib/recorder');

const DateValue = function () {};
nopt.typeDefs[DateValue] = { type: DateValue, validate(data, key, val) {
  let date;
  if (val === 'now') val = '+0';
  if (val.length && (val[0] === '+' || val[0] === '-')) {
    date = new Date(Math.round(new Date().getTime() / 1000 + parseInt(val, 10)) * 1000);
  } else if (parseInt(val, 10) == val) {
    date = new Date(parseInt(val, 10) * 1000);
  } else {
    date = new Date(val);
  }

  if (!date) return false;
  data[key] = date;
}};

const HexValue = function () {};
nopt.typeDefs[HexValue] = { type: HexValue, validate(data, key, val) {
  data[key] = Buffer.from(val, 'hex');
}};

const hlsrecord = require('noptify')(process.argv, { program: 'hlsrecord <url>' });
hlsrecord.version(require('../package').version)
   .option('collect', '-C', 'Collect output segments to a single file', Boolean)
   .option('output', '-o', 'Output directory', String)
   .option('create-dir', '-c', 'Explicitly create output dir', Boolean)
   .option('begin-date', '-b', 'Start recording at', DateValue)
   .option('end-date', '-e', 'Stop recording at', DateValue)
   .option('start-offset', '-s', 'Playback start time offset in seconds', Number)
   .option('extension', 'Preserve specified vendor extension', Array)
   .option('segment-extension', 'Preserve specified vendor segment extension', Array)
   .option('user-agent', '-a', 'HTTP User-Agent', String)
   .option('decrypt', 'Attempt to decrypt segments', Boolean)
   .option('cookie', 'Add cookie header to key requests', String)
   .option('key', 'Use oob hex encoded key to decrypt segments', HexValue)
//   .option('-f, --full', 'record all variants')
   .parse(process.argv);

const options = hlsrecord.nopt;
const src = options.argv.remain[0];
if (!src) {
  hlsrecord.help();
  process.exit(-1);
}

const outDir = options.output || 'stream';
if (options['create-dir'])
  Fs.mkdirSync(outDir);

if (options['begin-date'])
  console.log('fetching from:', options['begin-date']);
if (options['end-date'])
  console.log('fetching until:', options['end-date']);

const extensions = {};
(options.extension || []).forEach((ext) => {

  extensions[ext] = false;
});
(options['segment-extension'] || []).forEach((ext) => {

  extensions[ext] = true;
});

const readerOptions = {
  withData: true,
  fullStream: !options['begin-date'],
  startDate: options['begin-date'],
  stopDate: options['end-date'],
  maxStallTime: 5 * 60 * 1000,
  extensions,
  highWaterMark: 0,
};

const createReader = (src) => {

  const r = new HlsSegmentReader(src, readerOptions);
  r.on('error', (err) => {

    console.error('reader error', err);
  });

  return r;
};

let decrypt = null;
if (options.decrypt) {
  decrypt = {
    cookie: options.cookie,
    key: options.key
  };
}

const rdr = createReader(src);
Recorder(rdr, outDir, { subreader:createReader, startOffset: options['start-offset'], collect: options.collect, decrypt }).start();
